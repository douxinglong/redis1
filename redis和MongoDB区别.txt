1.MongoDB与Redis都依赖内存，但redisTPS高于MongoDB
2.MongoDB有丰富的数据表达,索引;最类似于关系型数据库,支持丰富的查询语句，redis数据丰富,较少的IO
3.MongoDB适合大数据量存储,依赖系统虚拟内存,采用镜像文件存储;内存占用率比较高,官方建议独立部署在64位系统，Redis2.0后支持虚拟内存特性(VM) 突破物理内存限制;数据可以设置时效性,类似于memcache
4.MongoDB支持master-slave,replicatset(内部采用paxos选举算法,自动故障恢复),auto sharding机制,对客户端屏蔽了故障转移和切片机制，redis依赖客户端来实现分布式读写;主从复制时,每次从节点重新连接主节点都要依赖整个快照,无增量复制;不支持auto sharding,需要依赖程序设定一致性hash机制
5.MongoDB从1.8版本后,采用binlog方式(类似Mysql) 支持持久化，redis依赖快照进行持久化;AOF增强可靠性;增强性的同时,影响访问性能
6.MongoDB不支持事务,靠客户端保证，redis支持事务,比较脆,仅能保证事务中的操作按顺序执行
7.MongoDB内置数据分析功能，redis不支持数据分析
8.MongoDB海量数据的访问效率提升，相比之下redis较小数据量的性能和运算
应用场景
1.当TPS(每秒传输的事物处理个数)非常高的时候，可以用到redis中数据持久化和分布式锁的内容，通过redis数据持久化，我们可以将缓存的数据保存到本地中来。此时使用redis较好。
2.当拥有海量数据但要求有限查询时间可以采用mongodb中的分片来实现，通过mongodb的分片机制，我们可以将海量的数据查询分别负载到不同的分片服务器上面，最后将数据查询的数据结果整合到一起。基于这种情况，不管数据量有多大，我们都可以实现快速的查询功能，查询时间约等于（数据量/分片数量）。分片其实本身就是一种高可用性的方案，因为每一个分片都保留着完整的一份数据，每次插入数据的时候，先插入一个主分片中，然后同步复制到所有从分片中，即使一个分片挂了，其余分片也能自动升级为主分片，继续工作。